---
# Retrieve the current hostname, because {{ ansible_hostname }} still contains the old name
- shell: hostname
  register: current_hostname

- name: Install MySQL Packages
  become: yes
  apt: pkg={{ item }} state=latest
  with_items:
    - mysql-server
    - mysql-client
    - python-mysqldb

- name: Ensure MySQL service running
  become: yes
  service: name=mysql state=started enabled=yes

- name: Check if .my.cnf file exists
  local_action: stat path="{{ansible_env.HOME}}/.my.cnf"
  register: stat_myconf

- name: Set root user password
  # If .my.cnf already exists, this will cause an mysql-root-password update.
  ## BDS_Custom: $$-- Fix, added ansible instruction to execute this task as "sudo".
  become: yes
  ## --$$
  mysql_user:
    name: root
    host: "localhost"
    check_implicit_admin: yes
    login_user: root
    password: "{{ mysql.root_password}}"
  when: stat_myconf.stat.exists == False

- name: Create .my.cnf
  template:
    src: "{{role_path}}/files/client.my.cnf.j2"
    dest: "{{ansible_env.HOME}}/.my.cnf"
    owner: vagrant
    group: vagrant
    mode: 0600
  when: stat_myconf.stat.exists == False

- name: Create databases
  mysql_db: name={{ mysql.database }} state=present login_user=root login_password={{ mysql.root_password }}

- name: Import dump
  mysql_db: name={{ mysql.database }} state=import login_user=root login_password={{ mysql.root_password }} target=/vagrant/{{ mysql.dump }}
  when: mysql.dump
  register: mysql_dump_imported

- name: Ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent login_user=root login_password={{ mysql.root_password }}
  with_items:
    - localhost
    - "{{ current_hostname.stdout | lower }}"

- name: Create users
  mysql_user: name={{ mysql.user }} password={{ mysql.password }} priv={{ mysql.database }}.*:ALL state=present login_user=root login_password={{ mysql.root_password }}

- name: Transfer mysql to in memory storage
  include: in_memory.yml
  when: mysql.in_memory
